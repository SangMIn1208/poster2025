[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "poster2025",
    "section": "",
    "text": "Date\n\n\nTitle\n\n\nAuthor\n\n\n\n\n\n\nMar 31, 2025\n\n\n4. 딥러닝 적합\n\n\n이상민 \n\n\n\n\nMar 31, 2025\n\n\n2. 날씨 데이터 시각화\n\n\n이상민 \n\n\n\n\nMar 31, 2025\n\n\n3. granger 논문 읽기\n\n\n이상민 \n\n\n\n\nMar 24, 2025\n\n\n1. 2024 기상데이터 전처리\n\n\n이상민 \n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/1.2024기상데이터전처리blog.html",
    "href": "posts/1.2024기상데이터전처리blog.html",
    "title": "1. 2024 기상데이터 전처리",
    "section": "",
    "text": "import pandas as pd\n\n\n데이터 불러오기\n\n\nwt= pd.read_csv(\"OBS_ASOS_TIM_20250322224121.csv\",encoding=\"cp949\")\n\n\nwt\n\n\n\n\n\n\n\n\n지점\n지점명\n일시\n기온(°C)\n강수량(mm)\n풍속(m/s)\n습도(%)\n일사(MJ/m2)\n\n\n\n\n0\n146\n전주\n2024-01-01 01:00\n3.8\nNaN\n1.5\n80\nNaN\n\n\n1\n146\n전주\n2024-01-01 02:00\n3.9\nNaN\n0.2\n79\nNaN\n\n\n2\n146\n전주\n2024-01-01 03:00\n3.5\nNaN\n0.4\n84\nNaN\n\n\n3\n146\n전주\n2024-01-01 04:00\n1.9\nNaN\n1.1\n92\nNaN\n\n\n4\n146\n전주\n2024-01-01 05:00\n1.4\nNaN\n1.5\n94\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n8755\n146\n전주\n2024-12-30 20:00\n7.6\nNaN\n1.4\n71\nNaN\n\n\n8756\n146\n전주\n2024-12-30 21:00\n7.5\nNaN\n1.7\n69\nNaN\n\n\n8757\n146\n전주\n2024-12-30 22:00\n7.2\nNaN\n1.2\n70\nNaN\n\n\n8758\n146\n전주\n2024-12-30 23:00\n7.2\nNaN\n1.7\n71\nNaN\n\n\n8759\n146\n전주\n2024-12-31 00:00\n7.4\nNaN\n2.8\n70\nNaN\n\n\n\n\n8760 rows × 8 columns\n\n\n\n\nnull값 확인\n\n\nwt.isnull().sum()\n\n지점              0\n지점명             0\n일시              0\n기온(°C)          0\n강수량(mm)      7822\n풍속(m/s)         0\n습도(%)           0\n일사(MJ/m2)    3967\ndtype: int64\n\n\n\nwt.columns\n\nIndex(['지점', '지점명', '일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)',\n       '일사(MJ/m2)'],\n      dtype='object')\n\n\n\n필요없는 변수 제거\n\n\nwt=wt.drop(columns=['지점명','지점'])\n\n\nwt.columns\n\nIndex(['일시', '기온(°C)', '강수량(mm)', '풍속(m/s)', '습도(%)', '일사(MJ/m2)'], dtype='object')\n\n\n\ncolumn명 쉽게 변경\n\n\nwt.columns=['일시','기온','강수량','풍속','습도','일사']\n\n\nwt\n\n\n\n\n\n\n\n\n일시\n기온\n강수량\n풍속\n습도\n일사\n\n\n\n\n0\n2024-01-01 01:00\n3.8\nNaN\n1.5\n80\nNaN\n\n\n1\n2024-01-01 02:00\n3.9\nNaN\n0.2\n79\nNaN\n\n\n2\n2024-01-01 03:00\n3.5\nNaN\n0.4\n84\nNaN\n\n\n3\n2024-01-01 04:00\n1.9\nNaN\n1.1\n92\nNaN\n\n\n4\n2024-01-01 05:00\n1.4\nNaN\n1.5\n94\nNaN\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n8755\n2024-12-30 20:00\n7.6\nNaN\n1.4\n71\nNaN\n\n\n8756\n2024-12-30 21:00\n7.5\nNaN\n1.7\n69\nNaN\n\n\n8757\n2024-12-30 22:00\n7.2\nNaN\n1.2\n70\nNaN\n\n\n8758\n2024-12-30 23:00\n7.2\nNaN\n1.7\n71\nNaN\n\n\n8759\n2024-12-31 00:00\n7.4\nNaN\n2.8\n70\nNaN\n\n\n\n\n8760 rows × 6 columns\n\n\n\n\nnull값 제거\n강수량, 일사 변수만 null값이 있기때문에 비가 안올 때, 밤에 0으로 측정이 안되었다고 판단\n0으로 채움\n\n\nwt[['강수량', '일사']] = wt[['강수량', '일사']].fillna(0)\n\n\nwt\n\n\n\n\n\n\n\n\n일시\n기온\n강수량\n풍속\n습도\n일사\n\n\n\n\n0\n2024-01-01 01:00\n3.8\n0.0\n1.5\n80\n0.0\n\n\n1\n2024-01-01 02:00\n3.9\n0.0\n0.2\n79\n0.0\n\n\n2\n2024-01-01 03:00\n3.5\n0.0\n0.4\n84\n0.0\n\n\n3\n2024-01-01 04:00\n1.9\n0.0\n1.1\n92\n0.0\n\n\n4\n2024-01-01 05:00\n1.4\n0.0\n1.5\n94\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n8755\n2024-12-30 20:00\n7.6\n0.0\n1.4\n71\n0.0\n\n\n8756\n2024-12-30 21:00\n7.5\n0.0\n1.7\n69\n0.0\n\n\n8757\n2024-12-30 22:00\n7.2\n0.0\n1.2\n70\n0.0\n\n\n8758\n2024-12-30 23:00\n7.2\n0.0\n1.7\n71\n0.0\n\n\n8759\n2024-12-31 00:00\n7.4\n0.0\n2.8\n70\n0.0\n\n\n\n\n8760 rows × 6 columns\n\n\n\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# 그래프 크기 설정\nfig, axes = plt.subplots(3, 2, figsize=(12, 12))\naxes = axes.flatten()\n\n# 각 변수별 시각화\nfor i, col in enumerate(wt.columns[1:]):\n    sns.lineplot(data=wt[col], marker='o', ax=axes[i])\n    axes[i].set_title(col)\n    axes[i].set_ylabel(col)\n\n# 빈 그래프 삭제\nfig.delaxes(axes[-1])  \n\nplt.tight_layout()\nplt.show()\n\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/root/anaconda3/envs/pypy/lib/python3.10/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\ncsv 생성\n\n\nwt.to_csv('weather2024.csv', index=False, encoding='utf-8-sig')"
  },
  {
    "objectID": "posts/2.시각화및VAR적합.html",
    "href": "posts/2.시각화및VAR적합.html",
    "title": "2. 날씨 데이터 시각화",
    "section": "",
    "text": "import pandas as pd\nimport matplotlib.pyplot as plt\n\n\nwt= pd.read_csv(\"weather2024.csv\")\n\n\nwt\n\n\n\n\n\n\n\n\n일시\n기온\n강수량\n풍속\n습도\n일사\n\n\n\n\n0\n2024-01-01 01:00\n3.8\n0.0\n1.5\n80\n0.0\n\n\n1\n2024-01-01 02:00\n3.9\n0.0\n0.2\n79\n0.0\n\n\n2\n2024-01-01 03:00\n3.5\n0.0\n0.4\n84\n0.0\n\n\n3\n2024-01-01 04:00\n1.9\n0.0\n1.1\n92\n0.0\n\n\n4\n2024-01-01 05:00\n1.4\n0.0\n1.5\n94\n0.0\n\n\n...\n...\n...\n...\n...\n...\n...\n\n\n8755\n2024-12-30 20:00\n7.6\n0.0\n1.4\n71\n0.0\n\n\n8756\n2024-12-30 21:00\n7.5\n0.0\n1.7\n69\n0.0\n\n\n8757\n2024-12-30 22:00\n7.2\n0.0\n1.2\n70\n0.0\n\n\n8758\n2024-12-30 23:00\n7.2\n0.0\n1.7\n71\n0.0\n\n\n8759\n2024-12-31 00:00\n7.4\n0.0\n2.8\n70\n0.0\n\n\n\n\n8760 rows × 6 columns\n\n\n\n\nwt.columns = ['date', 'tem', 'rain', 'wind', 'hum', 'sol']\n\n\n전체 기간 시도표\n\n\nfor i in range(5):\n    wt.iloc[:,[i+1]].plot(figsize=(15, 3));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n첫 1주일 시도표\n\n\nfor i in range(5):\n    wt.iloc[:24*7,[i+1]].plot(figsize=(15, 3));\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfrom statsmodels.tsa.seasonal import seasonal_decompose\n\n#ts = pd.Series(dff.iloc[:24*7,[0+1]].values, index=pd.date_range(start='2024-01-01', periods=24, freq='H'))\n\n# 분해 수행 (Additive 모델, 주기성 주기=24시간)\nresult = seasonal_decompose(wt.iloc[:24*14,[0+1]].values, model='additive', period=24)\n\n# 시각화\nresult.plot()\n#plt.suptitle(\"시계열 분해 결과 (추세 + 계절 + 잡음)\")\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nfrom statsmodels.graphics.tsaplots import plot_acf, plot_pacf\n\nts=wt.iloc[:24*14,[0+1]].values\nfig, axes = plt.subplots(1, 2, figsize=(14, 4))\n\nplot_acf(ts, lags=50, ax=axes[0])\naxes[0].set_title(\"ACF\")\n\nplot_pacf(ts, lags=50, ax=axes[1])\naxes[1].set_title(\"PACF\")\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nwt.iloc[:,1:].corr()\n\n\n\n\n\n\n\n\ntem\nrain\nwind\nhum\nsol\n\n\n\n\ntem\n1.000000\n0.051619\n0.016475\n-0.056472\n0.348940\n\n\nrain\n0.051619\n1.000000\n0.045720\n0.184801\n-0.070628\n\n\nwind\n0.016475\n0.045720\n1.000000\n-0.311978\n0.284515\n\n\nhum\n-0.056472\n0.184801\n-0.311978\n1.000000\n-0.620501\n\n\nsol\n0.348940\n-0.070628\n0.284515\n-0.620501\n1.000000\n\n\n\n\n\n\n\n\nVAR 모형에 적합\n\n\\(X\\) : y의 과거값 및 외생변수, 길이는 24*14\n\\(y\\) : 예측하고자 하는 일사량, 길이는 24\n\n\n온도와 일사량\n\n\nX = wt.iloc[:24*14,[1,-1]]\ny = wt.iloc[24*14:24*15,1:]\n\n\nfrom statsmodels.tsa.api import VAR\nfrom sklearn.metrics import mean_squared_error\n# 데이터: y, x1~x4가 있는 시계열 데이터프레임\n# 인덱스는 datetime이어야 함\n\n# 1. 정상성 검사 및 필요시 차분 (여기선 생략, 필요시 추가해줘)\n\n# 2. VAR 모형 적합\nmodel = VAR(X)\n\n# 3. 시차 선택\nlag_result = model.select_order(maxlags=48)\nprint(\"AIC 기준 최적 시차:\", lag_result.selected_orders['aic'])\nlag = lag_result.selected_orders['aic']\n\n# 4. VAR 모델 적합\nresults = model.fit(lag)\n#print(results.summary())\n\nAIC 기준 최적 시차: 21\n\n\n\nn_forecast = 21\nforecast_input = X.values[-lag:]  # 최근 lag만큼의 데이터 사용\nforecast1 = results.forecast(y=forecast_input, steps=n_forecast)\n\n\n습도와 일사량\n\n\nX = wt.iloc[:24*14,[-2,-1]]\n#y = wt.iloc[24*7:24*8,1:]\n\nmodel = VAR(X)\n\n# 3. 시차 선택\nlag_result = model.select_order(maxlags=24)\nprint(\"AIC 기준 최적 시차:\", lag_result.selected_orders['aic'])\nlag = lag_result.selected_orders['aic']\n\n# 4. VAR 모델 적합\nresults = model.fit(lag)\nresults.summary()\n\nAIC 기준 최적 시차: 21\n\n\n  Summary of Regression Results   \n==================================\nModel:                         VAR\nMethod:                        OLS\nDate:           Mon, 31, Mar, 2025\nTime:                     08:39:30\n--------------------------------------------------------------------\nNo. of Equations:         2.00000    BIC:                  0.0867873\nNobs:                     315.000    HQIC:                 -0.528393\nLog likelihood:          -660.240    FPE:                   0.392863\nAIC:                    -0.937725    Det(Omega_mle):        0.304156\n--------------------------------------------------------------------\nResults for equation hum\n==========================================================================\n             coefficient       std. error           t-stat            prob\n--------------------------------------------------------------------------\nconst          12.877262         3.048607            4.224           0.000\nL1.hum          1.034009         0.064842           15.947           0.000\nL1.sol         -6.288329         1.841606           -3.415           0.001\nL2.hum         -0.085306         0.091430           -0.933           0.351\nL2.sol          2.476996         2.761977            0.897           0.370\nL3.hum         -0.105987         0.091506           -1.158           0.247\nL3.sol          4.269964         2.810271            1.519           0.129\nL4.hum          0.104119         0.091715            1.135           0.256\nL4.sol         -3.066122         2.814244           -1.090           0.276\nL5.hum          0.020022         0.091322            0.219           0.826\nL5.sol          0.726784         2.790890            0.260           0.795\nL6.hum         -0.154890         0.090401           -1.713           0.087\nL6.sol         -1.001202         2.651443           -0.378           0.706\nL7.hum          0.063325         0.090179            0.702           0.483\nL7.sol         -1.789725         2.574931           -0.695           0.487\nL8.hum          0.013035         0.090204            0.145           0.885\nL8.sol          2.753985         2.559143            1.076           0.282\nL9.hum         -0.079469         0.090351           -0.880           0.379\nL9.sol         -2.534441         2.565794           -0.988           0.323\nL10.hum        -0.021562         0.090809           -0.237           0.812\nL10.sol         0.092242         2.566511            0.036           0.971\nL11.hum         0.101221         0.090510            1.118           0.263\nL11.sol         0.270904         2.559397            0.106           0.916\nL12.hum        -0.044597         0.090874           -0.491           0.624\nL12.sol        -0.931457         2.592624           -0.359           0.719\nL13.hum        -0.049559         0.090879           -0.545           0.586\nL13.sol         0.019081         2.638249            0.007           0.994\nL14.hum         0.071637         0.090692            0.790           0.430\nL14.sol        -1.801443         2.654979           -0.679           0.497\nL15.hum        -0.159492         0.091383           -1.745           0.081\nL15.sol        -1.397162         2.654903           -0.526           0.599\nL16.hum         0.130378         0.091520            1.425           0.154\nL16.sol         3.921220         2.642805            1.484           0.138\nL17.hum         0.125505         0.091874            1.366           0.172\nL17.sol        -0.658568         2.657127           -0.248           0.804\nL18.hum        -0.039232         0.092146           -0.426           0.670\nL18.sol         0.307973         2.647252            0.116           0.907\nL19.hum        -0.033336         0.091821           -0.363           0.717\nL19.sol        -2.210109         2.647698           -0.835           0.404\nL20.hum        -0.091010         0.091946           -0.990           0.322\nL20.sol         1.522105         2.596331            0.586           0.558\nL21.hum         0.060905         0.065948            0.924           0.356\nL21.sol        -3.586148         1.718873           -2.086           0.037\n==========================================================================\n\nResults for equation sol\n==========================================================================\n             coefficient       std. error           t-stat            prob\n--------------------------------------------------------------------------\nconst          -0.013084         0.108455           -0.121           0.904\nL1.hum         -0.004107         0.002307           -1.780           0.075\nL1.sol          1.190143         0.065516           18.166           0.000\nL2.hum          0.001161         0.003253            0.357           0.721\nL2.sol         -0.319998         0.098258           -3.257           0.001\nL3.hum          0.003093         0.003255            0.950           0.342\nL3.sol         -0.013066         0.099976           -0.131           0.896\nL4.hum         -0.002233         0.003263           -0.685           0.494\nL4.sol         -0.105982         0.100118           -1.059           0.290\nL5.hum          0.000845         0.003249            0.260           0.795\nL5.sol          0.007535         0.099287            0.076           0.940\nL6.hum          0.004978         0.003216            1.548           0.122\nL6.sol         -0.002949         0.094326           -0.031           0.975\nL7.hum         -0.002640         0.003208           -0.823           0.410\nL7.sol          0.000148         0.091604            0.002           0.999\nL8.hum         -0.003149         0.003209           -0.981           0.326\nL8.sol          0.058175         0.091042            0.639           0.523\nL9.hum          0.002759         0.003214            0.858           0.391\nL9.sol          0.043017         0.091279            0.471           0.637\nL10.hum        -0.000294         0.003231           -0.091           0.927\nL10.sol        -0.032885         0.091305           -0.360           0.719\nL11.hum        -0.000207         0.003220           -0.064           0.949\nL11.sol        -0.080112         0.091052           -0.880           0.379\nL12.hum         0.001996         0.003233            0.617           0.537\nL12.sol        -0.010646         0.092234           -0.115           0.908\nL13.hum         0.002650         0.003233            0.820           0.412\nL13.sol         0.054054         0.093857            0.576           0.565\nL14.hum        -0.007051         0.003226           -2.185           0.029\nL14.sol         0.042851         0.094452            0.454           0.650\nL15.hum         0.004732         0.003251            1.456           0.146\nL15.sol         0.005935         0.094449            0.063           0.950\nL16.hum        -0.003122         0.003256           -0.959           0.338\nL16.sol        -0.081783         0.094019           -0.870           0.384\nL17.hum         0.000985         0.003268            0.301           0.763\nL17.sol         0.018094         0.094528            0.191           0.848\nL18.hum        -0.000796         0.003278           -0.243           0.808\nL18.sol        -0.070061         0.094177           -0.744           0.457\nL19.hum         0.003162         0.003267            0.968           0.333\nL19.sol        -0.020653         0.094193           -0.219           0.826\nL20.hum        -0.002413         0.003271           -0.738           0.461\nL20.sol         0.080876         0.092365            0.876           0.381\nL21.hum         0.000457         0.002346            0.195           0.846\nL21.sol         0.107119         0.061150            1.752           0.080\n==========================================================================\n\nCorrelation matrix of residuals\n            hum       sol\nhum    1.000000 -0.387709\nsol   -0.387709  1.000000\n\n\n\n\nn_forecast = 21\nforecast_input = X.values[-lag:]  # 최근 lag만큼의 데이터 사용\nforecast2 = results.forecast(y=forecast_input, steps=n_forecast)\n\n\n풍속과 일사량\n\n\nX = wt.iloc[:24*14,[-3,-1]]\n#y = wt.iloc[24*7:24*8,1:]\n\nmodel = VAR(X)\n\n# 3. 시차 선택\nlag_result = model.select_order(maxlags=24)\nprint(\"AIC 기준 최적 시차:\", lag_result.selected_orders['aic'])\nlag = lag_result.selected_orders['aic']\n\n# 4. VAR 모델 적합\nresults = model.fit(lag)\nresults.summary()\n\nn_forecast = 21\nforecast_input = X.values[-lag:]  # 최근 lag만큼의 데이터 사용\nforecast2_ = results.forecast(y=forecast_input, steps=n_forecast)\n\nAIC 기준 최적 시차: 21\n\n\n\n강수량과 일사량\n\n\nX = wt.iloc[:24*14,[-4,-1]]\n#y = wt.iloc[24*7:24*8,1:]\n\nmodel = VAR(X)\n\n# 3. 시차 선택\nlag_result = model.select_order(maxlags=24)\nprint(\"AIC 기준 최적 시차:\", lag_result.selected_orders['aic'])\nlag = lag_result.selected_orders['aic']\n\n# 4. VAR 모델 적합\nresults = model.fit(lag)\nresults.summary()\n\nn_forecast = 21\nforecast_input = X.values[-lag:]  # 최근 lag만큼의 데이터 사용\nforecast3_ = results.forecast(y=forecast_input, steps=n_forecast)\n\nAIC 기준 최적 시차: 20\n\n\n\nAR 모형 일사량만 이용\n\n\nfrom statsmodels.tsa.ar_model import AutoReg\n\n# 예시: y 시계열 데이터프레임 (datetime index 권장)\n# df = pd.read_csv(\"your_data.csv\", index_col=0, parse_dates=True)\n# y = df['y']\ny_ = wt.iloc[:24*14,[-1]]# 시계열 형태로 가져오기\n\n# 1. 시차(p) 설정 또는 자동 선택\np = 21  # 최근 24시간을 기반으로 다음을 예측한다고 가정\n\n# 2. AR 모형 적합\nmodel = AutoReg(y_, lags=p, old_names=False)\nresults = model.fit()\n\n# 3. 다음 24시간 예측\nforecast3 = results.predict(start=len(y), end=len(y)+23)\n\n\nprint('온도, 일사량',mean_squared_error(y['sol'].values,forecast1[:,1]))\nprint('습도, 일사량',mean_squared_error(y['sol'].values,forecast2[:,1]))\nprint('풍속, 일사량',mean_squared_error(y['sol'].values,forecast2_[:,1]))\nprint('강수량, 일사량',mean_squared_error(y['sol'].values,forecast3_[:,1]))\n\nprint('일사량',mean_squared_error(y['sol'].values,forecast3))\n\n\n\nplt.figure(figsize = (15,7))\nplt.plot(y['sol'].values, label = 'y',color = 'black')\nplt.plot(forecast1[:,1],label = 'tem+sol')\nplt.plot(forecast2[:,1],label = 'hum+sol')\nplt.plot(forecast2_[:,1],label = 'wind+sol')\nplt.plot(forecast3_[:,1],label = 'rain+sol')\n\nplt.plot(forecast3.values,label = 'sol')\nplt.legend()\nplt.show()\n\n\n---------------------------------------------------------------------------\nValueError                                Traceback (most recent call last)\nCell In[51], line 1\n----&gt; 1 print('온도, 일사량',mean_squared_error(y['sol'].values,forecast1[:,1]))\n      2 print('습도, 일사량',mean_squared_error(y['sol'].values,forecast2[:,1]))\n      3 print('풍속, 일사량',mean_squared_error(y['sol'].values,forecast2_[:,1]))\n\nFile ~/anaconda3/envs/pypy/lib/python3.10/site-packages/sklearn/utils/_param_validation.py:213, in validate_params.&lt;locals&gt;.decorator.&lt;locals&gt;.wrapper(*args, **kwargs)\n    207 try:\n    208     with config_context(\n    209         skip_parameter_validation=(\n    210             prefer_skip_nested_validation or global_skip_validation\n    211         )\n    212     ):\n--&gt; 213         return func(*args, **kwargs)\n    214 except InvalidParameterError as e:\n    215     # When the function is just a wrapper around an estimator, we allow\n    216     # the function to delegate validation to the estimator, but we replace\n    217     # the name of the estimator by the name of the function in the error\n    218     # message to avoid confusion.\n    219     msg = re.sub(\n    220         r\"parameter of \\w+ must be\",\n    221         f\"parameter of {func.__qualname__} must be\",\n    222         str(e),\n    223     )\n\nFile ~/anaconda3/envs/pypy/lib/python3.10/site-packages/sklearn/metrics/_regression.py:497, in mean_squared_error(y_true, y_pred, sample_weight, multioutput, squared)\n    492     if not squared:\n    493         return root_mean_squared_error(\n    494             y_true, y_pred, sample_weight=sample_weight, multioutput=multioutput\n    495         )\n--&gt; 497 y_type, y_true, y_pred, multioutput = _check_reg_targets(\n    498     y_true, y_pred, multioutput\n    499 )\n    500 check_consistent_length(y_true, y_pred, sample_weight)\n    501 output_errors = np.average((y_true - y_pred) ** 2, axis=0, weights=sample_weight)\n\nFile ~/anaconda3/envs/pypy/lib/python3.10/site-packages/sklearn/metrics/_regression.py:102, in _check_reg_targets(y_true, y_pred, multioutput, dtype)\n     68 def _check_reg_targets(y_true, y_pred, multioutput, dtype=\"numeric\"):\n     69     \"\"\"Check that y_true and y_pred belong to the same regression task.\n     70 \n     71     Parameters\n   (...)\n    100         correct keyword.\n    101     \"\"\"\n--&gt; 102     check_consistent_length(y_true, y_pred)\n    103     y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n    104     y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)\n\nFile ~/anaconda3/envs/pypy/lib/python3.10/site-packages/sklearn/utils/validation.py:430, in check_consistent_length(*arrays)\n    428 uniques = np.unique(lengths)\n    429 if len(uniques) &gt; 1:\n--&gt; 430     raise ValueError(\n    431         \"Found input variables with inconsistent numbers of samples: %r\"\n    432         % [int(l) for l in lengths]\n    433     )\n\nValueError: Found input variables with inconsistent numbers of samples: [24, 21]"
  }
]